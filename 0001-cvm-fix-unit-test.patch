From 4cbe2d6f7e43f9cbbf3fb25716936f4dd952edc3 Mon Sep 17 00:00:00 2001
From: thesumery <xiayu2017@126.com>
Date: Tue, 20 Dec 2022 14:53:56 +0800
Subject: [PATCH] =?utf-8?q?cvm=E8=81=94=E8=B0=83:fix=20unit=20test?=
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 8bit

---
 .../apache/inlong/agent/plugin/MiniAgent.java | 35 ++++++++++++-----
 .../inlong/agent/plugin/TestFileAgent.java    | 19 +++++++---
 .../plugin/filter/TestDateFormatRegex.java    | 10 +++--
 .../plugin/sources/TestTextFileReader.java    |  6 +--
 .../plugin/trigger/TestTriggerManager.java    | 38 +++++++++++--------
 .../plugin/trigger/TestWatchDirTrigger.java   | 24 +-----------
 6 files changed, 73 insertions(+), 59 deletions(-)

diff --git a/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/MiniAgent.java b/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/MiniAgent.java
index 793130ab5..f2d768367 100755
--- a/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/MiniAgent.java
+++ b/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/MiniAgent.java
@@ -29,6 +29,8 @@ import org.powermock.api.support.membermodification.MemberModifier;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.concurrent.LinkedBlockingQueue;
 
 import static org.apache.inlong.agent.constant.AgentConstants.AGENT_FETCH_CENTER_INTERVAL_SECONDS;
@@ -38,6 +40,8 @@ public class MiniAgent {
     private static final Logger LOGGER = LoggerFactory.getLogger(MiniAgent.class);
     private AgentManager manager;
     private final LinkedBlockingQueue<JobProfile> queueJobs = new LinkedBlockingQueue<>(100);
+    private List<TriggerProfile> triggerProfileCache = new ArrayList<>();
+    private List<JobProfile> jobProfileCache = new ArrayList<>();
 
     /**
      * Constructor of MiniAgent.
@@ -68,15 +72,6 @@ public class MiniAgent {
         manager.start();
     }
 
-    public void submitJob(JobProfile profile) {
-        manager.getJobManager().submitFileJobProfile(profile);
-    }
-
-    public void submitTriggerJob(JobProfile profile) {
-        TriggerProfile triggerProfile = TriggerProfile.parseJobProfile(profile);
-        manager.getTriggerManager().restoreTrigger(triggerProfile);
-    }
-
     public AgentManager getManager() {
         return manager;
     }
@@ -91,4 +86,26 @@ public class MiniAgent {
         init();
         manager.start();
     }
+
+    public void submitJob(JobProfile profile) {
+        manager.getJobManager().submitFileJobProfile(profile);
+        jobProfileCache.add(profile);
+    }
+
+    public void submitTrigger(TriggerProfile triggerProfile) {
+        manager.getTriggerManager().submitTrigger(triggerProfile);
+        triggerProfileCache.add(triggerProfile);
+    }
+
+    public void cleanupJobs() {
+        jobProfileCache.forEach(jobProfile ->
+                manager.getJobManager().deleteJob(jobProfile.getInstanceId()));
+        jobProfileCache.clear();
+    }
+
+    public void cleanupTriggers() {
+        triggerProfileCache.forEach(triggerProfile ->
+                manager.getTriggerManager().deleteTrigger(triggerProfile.getTriggerId()));
+        triggerProfileCache.clear();
+    }
 }
diff --git a/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/TestFileAgent.java b/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/TestFileAgent.java
index c92df370e..2cdd82b60 100755
--- a/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/TestFileAgent.java
+++ b/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/TestFileAgent.java
@@ -26,6 +26,7 @@ import org.apache.inlong.agent.core.trigger.TriggerManager;
 import org.apache.inlong.agent.db.StateSearchKey;
 import org.apache.inlong.agent.plugin.utils.TestUtils;
 import org.apache.inlong.agent.utils.AgentUtils;
+import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.BeforeClass;
@@ -87,6 +88,12 @@ public class TestFileAgent {
         helper.teardownAgentHome();
     }
 
+    @After
+    public void teardownEach() {
+        agent.cleanupTriggers();
+        agent.cleanupJobs();
+    }
+
     private void createFiles(String fileName) throws Exception {
         final Path hugeFile = Paths.get(testRootDir.toString(), fileName);
         FileWriter writer = new FileWriter(hugeFile.toFile());
@@ -140,7 +147,7 @@ public class TestFileAgent {
                 "test*.dat").toString());
         triggerProfile.set(JOB_FILE_MAX_WAIT, "-1");
         TriggerManager triggerManager = agent.getManager().getTriggerManager();
-        triggerManager.submitTrigger(triggerProfile);
+        agent.submitTrigger(triggerProfile);
         TestUtils.createHugeFiles("test0.dat", testRootDir.toString(), RECORD);
         TestUtils.createHugeFiles("te1.dat", testRootDir.toString(), RECORD);
         await().atMost(10, TimeUnit.SECONDS).until(() -> {
@@ -159,9 +166,9 @@ public class TestFileAgent {
         triggerProfile.set(JOB_DIR_FILTER_PATTERNS, path + File.separator + "*.txt");
         triggerProfile.set(JOB_FILE_MAX_WAIT, "-1");
         triggerProfile.set(JOB_FILE_TRIGGER_TYPE, FileTriggerType.FULL);
-        triggerProfile.set(JOB_ID, "2");
+        triggerProfile.set(JOB_ID, "10");
         TriggerManager triggerManager = agent.getManager().getTriggerManager();
-        triggerManager.submitTrigger(triggerProfile);
+        agent.submitTrigger(triggerProfile);
         await().atMost(10, TimeUnit.SECONDS).until(() -> {
             Map<String, JobWrapper> jobs = agent.getManager().getJobManager().getJobs();
             return jobs.size() == 1
@@ -179,7 +186,7 @@ public class TestFileAgent {
                 profile.set(JOB_DIR_FILTER_PATTERNS, Paths.get(testRootDir.toString(),
                         "YYYYMMDD").toString());
                 profile.set(JOB_CYCLE_UNIT, "D");
-                agent.submitTriggerJob(profile);
+                agent.submitTrigger(TriggerProfile.parseJobProfile(profile));
             }
         }
         createFiles(nowDate);
@@ -198,7 +205,7 @@ public class TestFileAgent {
                 profile.set(JOB_CYCLE_UNIT, "D");
                 profile.set(AGENT_MESSAGE_FILTER_CLASSNAME,
                         "org.apache.inlong.agent.plugin.filter.DefaultMessageFilter");
-                agent.submitTriggerJob(profile);
+                agent.submitTrigger(TriggerProfile.parseJobProfile(profile));
             }
         }
         createFiles(nowDate);
@@ -216,7 +223,7 @@ public class TestFileAgent {
                         "YYYYMMDD").toString());
                 profile.set(JOB_FILE_TIME_OFFSET, "-1d");
                 profile.set(JOB_CYCLE_UNIT, "D");
-                agent.submitTriggerJob(profile);
+                agent.submitTrigger(TriggerProfile.parseJobProfile(profile));
             }
         }
         createFiles(theDateBefore);
diff --git a/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/filter/TestDateFormatRegex.java b/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/filter/TestDateFormatRegex.java
index 1e23fb459..46090dc71 100755
--- a/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/filter/TestDateFormatRegex.java
+++ b/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/filter/TestDateFormatRegex.java
@@ -30,6 +30,7 @@ import org.junit.BeforeClass;
 import org.junit.Test;
 
 import java.io.File;
+import java.io.IOException;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.time.ZonedDateTime;
@@ -72,12 +73,13 @@ public class TestDateFormatRegex {
     }
 
     @Test
-    public void testRegexAndTimeoffset() {
+    public void testRegexAndTimeoffset() throws IOException {
         ZonedDateTime zoned = ZonedDateTime.now().plusDays(-1);
         String pathTime = DateTimeFormatter.ofPattern("yyyyMMdd").withLocale(Locale.getDefault()).format(zoned);
-        File file = Paths.get(helper.getParentPath().toString(), pathTime.concat(".log")).toFile();
-        PathPattern entity = new PathPattern(helper.getParentPath().toString(),
-                Collections.singleton(helper.getParentPath().toString() + "/yyyyMMdd.log"), Sets.newHashSet(), "-1d");
+        File file = Paths.get(helper.getTestRootDir().toString(), pathTime.concat(".log")).toFile();
+        file.createNewFile();
+        PathPattern entity = new PathPattern(helper.getTestRootDir().toString(),
+                Collections.singleton(helper.getTestRootDir().toString() + "/yyyyMMdd.log"), Sets.newHashSet(), "-1d");
         boolean flag = entity.suitable(file.getPath());
         Assert.assertTrue(flag);
     }
diff --git a/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/sources/TestTextFileReader.java b/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/sources/TestTextFileReader.java
index 6cfa19936..c28b445c5 100755
--- a/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/sources/TestTextFileReader.java
+++ b/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/sources/TestTextFileReader.java
@@ -108,7 +108,7 @@ public class TestTextFileReader {
         JobProfile jobConfiguration = JobProfile.parseJsonStr("{}");
         String mainPath = Paths.get(uri).toString();
         jobConfiguration.set(JOB_DIR_FILTER_PATTERNS, Paths.get(mainPath,
-                "[2].txt").toFile().getAbsolutePath());
+                "2.txt").toFile().getAbsolutePath());
         jobConfiguration.set(JOB_INSTANCE_ID, "test");
         jobConfiguration.set(PROXY_INLONG_GROUP_ID, "groupid");
         jobConfiguration.set(PROXY_INLONG_STREAM_ID, "streamid");
@@ -139,7 +139,7 @@ public class TestTextFileReader {
         JobProfile jobConfiguration = JobProfile.parseJsonStr("{}");
         String mainPath = Paths.get(uri).toString();
         jobConfiguration.set(JOB_DIR_FILTER_PATTERNS, Paths.get(mainPath,
-                "[1].txt").toFile().getAbsolutePath());
+                "1.txt").toFile().getAbsolutePath());
         jobConfiguration.set(JOB_INSTANCE_ID, "test");
         jobConfiguration.set(PROXY_INLONG_GROUP_ID, "groupid");
         jobConfiguration.set(PROXY_INLONG_STREAM_ID, "streamid");
@@ -173,7 +173,7 @@ public class TestTextFileReader {
         JobProfile jobConfiguration = JobProfile.parseJsonStr("{}");
         String mainPath = Paths.get(uri).toString();
         jobConfiguration.set(JOB_DIR_FILTER_PATTERNS, Paths.get(mainPath,
-                "[1].txt").toFile().getAbsolutePath());
+                "1.txt").toFile().getAbsolutePath());
         jobConfiguration.set(JOB_INSTANCE_ID, "test");
         jobConfiguration.set(PROXY_INLONG_GROUP_ID, "groupid");
         jobConfiguration.set(PROXY_INLONG_STREAM_ID, "streamid");
diff --git a/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/trigger/TestTriggerManager.java b/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/trigger/TestTriggerManager.java
index b1bf65a05..727a65bcf 100644
--- a/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/trigger/TestTriggerManager.java
+++ b/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/trigger/TestTriggerManager.java
@@ -17,12 +17,12 @@
 
 package org.apache.inlong.agent.plugin.trigger;
 
+import org.apache.inlong.agent.conf.AgentConfiguration;
 import org.apache.inlong.agent.conf.TriggerProfile;
+import org.apache.inlong.agent.constant.AgentConstants;
 import org.apache.inlong.agent.constant.JobConstants;
 import org.apache.inlong.agent.core.trigger.TriggerManager;
-import org.apache.inlong.agent.plugin.AgentBaseTestsHelper;
 import org.apache.inlong.agent.plugin.MiniAgent;
-import org.apache.inlong.agent.plugin.TestFileAgent;
 import org.apache.inlong.agent.plugin.utils.TestUtils;
 import org.junit.BeforeClass;
 import org.junit.ClassRule;
@@ -31,7 +31,6 @@ import org.junit.rules.TemporaryFolder;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.nio.file.Path;
 import java.nio.file.WatchKey;
 import java.util.Map;
 import java.util.Set;
@@ -43,10 +42,7 @@ public class TestTriggerManager {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(TestTriggerManager.class);
 
-    private static Path testRootDir;
     private static MiniAgent agent;
-    private static AgentBaseTestsHelper helper;
-    private static TriggerManager triggerManager;
 
     @ClassRule
     public static final TemporaryFolder WATCH_FOLDER = new TemporaryFolder();
@@ -83,33 +79,36 @@ public class TestTriggerManager {
     @BeforeClass
     public static void setup() {
         try {
-            helper = new AgentBaseTestsHelper(TestFileAgent.class.getName()).setupAgentHome();
+            AgentConfiguration.getAgentConf().set(AgentConstants.AGENT_HOME, WATCH_FOLDER.getRoot().getAbsolutePath());
             agent = new MiniAgent();
             agent.start();
-            testRootDir = helper.getTestRootDir();
         } catch (Exception e) {
             LOGGER.error("setup failure");
         }
     }
 
-    // todo:Test whether the trigger task can be restored normally after restarting
     @Test
-    public void testRestart() throws Exception {
+    public void testRestartTriggerJobRestore() throws Exception {
         TriggerProfile triggerProfile1 = TriggerProfile.parseJsonStr(FILE_JOB_TEMPLATE);
         triggerProfile1.set(JobConstants.JOB_ID, "1");
         triggerProfile1.set(JobConstants.JOB_DIR_FILTER_PATTERNS,
-                WATCH_FOLDER.getRoot() + "/**/*.log");
+                WATCH_FOLDER.getRoot() + "/*.log");
         TriggerManager triggerManager = agent.getManager().getTriggerManager();
         triggerManager.submitTrigger(triggerProfile1);
 
         WATCH_FOLDER.newFolder("tmp");
         TestUtils.createHugeFiles("1.log", WATCH_FOLDER.getRoot().getAbsolutePath(), "asdqwdqd");
         TestUtils.createHugeFiles("2.log", WATCH_FOLDER.getRoot().getAbsolutePath(), "asdasdasd");
-        TestUtils.createHugeFiles("3.log", WATCH_FOLDER.getRoot().getAbsolutePath() + "/tmp", "asdasdasd");
-        await().atMost(10, TimeUnit.SECONDS).until(() -> agent.getManager().getTaskManager().getTaskSize() == 4);
+        await().atMost(10, TimeUnit.SECONDS).until(() -> agent.getManager().getTaskManager().getTaskSize() == 3);
 
         agent.restart();
-        await().atMost(10, TimeUnit.SECONDS).until(() -> agent.getManager().getTaskManager().getTaskSize() == 4);
+        await().atMost(10, TimeUnit.SECONDS).until(() -> agent.getManager().getTaskManager().getTaskSize() == 3);
+
+        // cleanup
+        agent.getManager().getTriggerManager().deleteTrigger(triggerProfile1.getTriggerId());
+        TestUtils.deleteFile(WATCH_FOLDER.getRoot().getAbsolutePath() + "/1.log");
+        TestUtils.deleteFile(WATCH_FOLDER.getRoot().getAbsolutePath() + "/2.log");
+        TestUtils.deleteFile(WATCH_FOLDER.getRoot().getAbsolutePath() + "/tmp/3.log");
     }
 
     @Test
@@ -131,6 +130,12 @@ public class TestTriggerManager {
         TestUtils.createHugeFiles("1.log", WATCH_FOLDER.getRoot().getAbsolutePath(), "asdqwdqd");
         TestUtils.createHugeFiles("1.txt", WATCH_FOLDER.getRoot().getAbsolutePath(), "asdasdasd");
         await().atMost(10, TimeUnit.SECONDS).until(() -> agent.getManager().getTaskManager().getTaskSize() == 4);
+
+        // cleanup
+        triggerManager.deleteTrigger(triggerProfile1.getTriggerId());
+        triggerManager.deleteTrigger(triggerProfile2.getTriggerId());
+        TestUtils.deleteFile(WATCH_FOLDER.getRoot().getAbsolutePath() + "/1.log");
+        TestUtils.deleteFile(WATCH_FOLDER.getRoot().getAbsolutePath() + "/1.txt");
     }
 
     @Test
@@ -140,6 +145,7 @@ public class TestTriggerManager {
         triggerProfile1.set(JobConstants.JOB_DIR_FILTER_PATTERNS,
                 WATCH_FOLDER.getRoot() + "/*.log");
 
+        // submit trigger
         TriggerManager triggerManager = agent.getManager().getTriggerManager();
         triggerManager.submitTrigger(triggerProfile1);
         TestUtils.createHugeFiles("1.log", WATCH_FOLDER.getRoot().getAbsolutePath(), "asdqwdqd");
@@ -160,7 +166,9 @@ public class TestTriggerManager {
             return true;
         });
 
+        //shutdown trigger
         triggerManager.deleteTrigger(triggerProfile1.getTriggerId());
-        await().atMost(100, TimeUnit.SECONDS).until(() -> trigger.getWatchers().size() == 0);
+        await().atMost(10, TimeUnit.SECONDS).until(() -> trigger.getWatchers().size() == 0);
+        TestUtils.deleteFile(WATCH_FOLDER.getRoot().getAbsolutePath() + "/1.log");
     }
 }
diff --git a/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/trigger/TestWatchDirTrigger.java b/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/trigger/TestWatchDirTrigger.java
index 4c14b9128..a5a027a50 100755
--- a/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/trigger/TestWatchDirTrigger.java
+++ b/inlong-agent/agent-plugins/src/test/java/org/apache/inlong/agent/plugin/trigger/TestWatchDirTrigger.java
@@ -19,7 +19,6 @@ package org.apache.inlong.agent.plugin.trigger;
 
 import java.io.File;
 import java.io.IOException;
-import java.nio.file.Path;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
@@ -32,12 +31,9 @@ import org.apache.commons.io.FileUtils;
 import org.apache.inlong.agent.conf.JobProfile;
 import org.apache.inlong.agent.conf.TriggerProfile;
 import org.apache.inlong.agent.constant.JobConstants;
-import org.apache.inlong.agent.plugin.AgentBaseTestsHelper;
 import org.junit.After;
-import org.junit.AfterClass;
 import org.junit.Assert;
 import org.junit.Before;
-import org.junit.BeforeClass;
 import org.junit.ClassRule;
 import org.junit.Test;
 import org.junit.rules.TemporaryFolder;
@@ -49,27 +45,11 @@ import static org.awaitility.Awaitility.await;
 public class TestWatchDirTrigger {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(TestWatchDirTrigger.class);
-    private static Path testRootDir;
     private static DirectoryTrigger trigger;
-    private static AgentBaseTestsHelper helper;
 
     @ClassRule
     public static final TemporaryFolder WATCH_FOLDER = new TemporaryFolder();
 
-    @BeforeClass
-    public static void setup() throws Exception {
-        helper = new AgentBaseTestsHelper(TestWatchDirTrigger.class.getName()).setupAgentHome();
-        testRootDir = helper.getTestRootDir();
-        LOGGER.info("test root dir is {}", testRootDir);
-    }
-
-    @AfterClass
-    public static void teardown() throws Exception {
-        LOGGER.info("start to teardown test case");
-        trigger.destroy();
-        helper.teardownAgentHome();
-    }
-
     @Before
     public void setupEach() throws Exception {
         trigger = new DirectoryTrigger();
@@ -95,9 +75,9 @@ public class TestWatchDirTrigger {
     @Test
     public void testWatchEntity() throws Exception {
         PathPattern a1 = new PathPattern("1",
-                Collections.singleton(helper.getParentPath().toString()), Sets.newHashSet());
+                Collections.singleton(WATCH_FOLDER.getRoot().toString()), Sets.newHashSet());
         PathPattern a2 = new PathPattern("1",
-                Collections.singleton(helper.getParentPath().toString()), Sets.newHashSet());
+                Collections.singleton(WATCH_FOLDER.getRoot().toString()), Sets.newHashSet());
         HashMap<PathPattern, Integer> map = new HashMap<>();
         map.put(a1, 10);
         Integer result = map.remove(a2);
-- 
2.34.0.windows.1

